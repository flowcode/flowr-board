<?php

namespace Flower\BoardBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Flower\ModelBundle\Entity\Board\Task;

/**
 * TimeLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TimeLogRepository extends EntityRepository
{
    public function getSpentByTask(Task $task)
    {
        $qb = $this->createQueryBuilder("tl");
        $qb->select("SUM(tl.hours)");

        $qb->andWhere("tl.task = :task")->setParameter("task", $task);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /* Returns sum of all hours */
    public function getAllSpent()
    {
        $qb = $this->createQueryBuilder("tl");
        $qb->select("SUM(tl.hours)");

        return $qb->getQuery()->getSingleScalarResult();
    }

    /* Returns sum of all hours */
    public function getSpent(Task $task = null, User $user = null)
    {
        $qb = $this->createQueryBuilder("tl");
        $qb->select("SUM(tl.hours)");
        if ($task) {
            $qb->where("tl.task = :task")->setParameter("task", $task);
        }
        if ($user) {
            $qb->andWhere("tl.user = :user")->setParameter("user", $user);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    /* generic spent */
    public function getAllQB($filters = array(), \DateTime $fromDate = null, \DateTime $toDate = null)
    {
        $qb = $this->createQueryBuilder("tl");

        $qb->join("tl.task", "task");
        $qb->join("tl.user", "u");
        $qb->leftJoin("task.account", "account");
        $qb->leftJoin("task.tracker", "tracker");

        if (isset($filters['account_id']) && !is_null($filters['account_id'])) {
            $qb->leftJoin("task.project", "project");
            $qb->leftJoin("project.account", "project_account");
            $qb->andWhere("(account.id = :account_id OR project_account.id = :project_account_id)")
                ->setParameter("account_id", $filters['account_id'])
                ->setParameter("project_account_id", $filters['account_id']);
        }

        if (isset($filters['project_id']) && !is_null($filters['project_id'])) {
            $qb->leftJoin("task.project", "project");
            $qb->andWhere("project.id = :project_id")->setParameter("project_id", $filters['project_id']);
        }

        if (isset($filters['user_id']) && !is_null($filters['user_id'])) {
            $qb->andWhere("u.id = :user_id")->setParameter("user_id", $filters['user_id']);
        }

        $qb->andWhere("(tl.spentOn >= :from_date AND tl.spentOn <= :to_date)")
            ->setParameter("from_date", $fromDate)
            ->setParameter("to_date", $toDate);

        return $qb;
    }

    public function getAllSpentFilter($filters = array(), \DateTime $fromDate = null, \DateTime $toDate = null)
    {
        $qb = $this->getAllQB($filters, $fromDate, $toDate);

        $qb->select("SUM(tl.hours)");

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getAllPaged($filters = array(), \DateTime $fromDate = null, \DateTime $toDate = null, $max = 20, $first = 0)
    {
        $qb = $this->getAllQB($filters, $fromDate, $toDate);

        $qb->setMaxResults($max);
        $qb->setFirstResult($first);

        return $qb->getQuery()->getResult();
    }
}
