<?php

namespace Flower\BoardBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;
use Flower\ModelBundle\Entity\Board\TaskStatus;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends EntityRepository
{

    public function findByStatusAndType($type = null, $statusId = null, $accountId = null, $projectId = null, $assigneeId = null, $max = null)
    {
        $qb = $this->createQueryBuilder("t");

        if (!is_null($type)) {
            $qb->andWhere("t.type = :type")->setParameter("type", $type);
        }

        if (!is_null($statusId)) {
            $qb->andWhere("t.status = :status_id")->setParameter("status_id", $statusId);
        }

        if (!is_null($accountId)) {
            $qb->andWhere("t.account = :account_id")->setParameter("account_id", $accountId);
        }

        if (!is_null($projectId)) {
            $qb->andWhere("t.project = :project_id")->setParameter("project_id", $projectId);
        }

        if (!is_null($assigneeId)) {
            $qb->andWhere("t.assignee = :assignee_id")->setParameter("assignee_id", $assigneeId);
        }

        if (!is_null($max)) {
            $qb->setMaxResults($max);
        }

        $qb->orderBy("t.updated", "DESC");
        return $qb->getQuery()->getResult();
    }

    public function findBetweenOrdersAndProject($from, $to , $project){
        $qb = $this->createQueryBuilder("t");
        $qb->andWhere("t.project = :project")->setParameter("project", $project);
        $qb->andWhere("t.position >= :from")->setParameter("from", $from);
        $qb->andWhere("t.position <= :to")->setParameter("to", $to);
        $qb->orderBy("t.updated", "DESC");
        return $qb->getQuery()->getResult();
    }

    public function findByStatus($statusId = null, $board_id = null, $max = null)
    {
        $qb = $this->createQueryBuilder("t");

        if (!is_null($statusId)) {
            $qb->andWhere("t.status = :status_id")->setParameter("status_id", $statusId);
        }

        if (!is_null($board_id)) {
            $qb->andWhere("t.board = :board_id")->setParameter("board_id", $board_id);
        }

        if (!is_null($max)) {
            $qb->setMaxResults($max);
        }
        $qb->orderBy("t.position", "ASC");
        $qb->addOrderBy("t.updated", "DESC");
        return $qb->getQuery()->getResult();
    }

    public function findByStatusByPos($statusId = null, $boardId = null, $assigneeId = null, $max = null)
    {
        $qb = $this->createQueryBuilder("t");

        if (!is_null($statusId)) {
            if(is_array($statusId)){
                $qb->andWhere("t.status in (:status_id)")->setParameter("status_id", $statusId);
            }else{
                $qb->andWhere("t.status = :status_id")->setParameter("status_id", $statusId);
            }
        }

        if (!is_null($boardId)) {
            $qb->andWhere("t.board = :board_id")->setParameter("board_id", $boardId);
        }

        if (!is_null($assigneeId)) {
            $qb->andWhere("t.assignee = :assignee_id")->setParameter("assignee_id", $assigneeId);
        }

        if (!is_null($max)) {
            $qb->setMaxResults($max);
        }

        $qb->orderBy("t.position", "ASC");
        return $qb->getQuery()->getResult();
    }

    public function getCountTodo()
    {
        $qb = $this->createQueryBuilder("t");
        $qb->select("COUNT(t)");
        $qb->innerJoin("t.status", "s", Join::WITH, 's.name = :status_name')->setParameter("status_name", TaskStatus::STATUS_TODO);
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function search($completeText, $texts,$limit = 10)
    {
        $qb = $this->createQueryBuilder("t");
        $qb->andWhere("t.name like :text")->setParameter("text", "%".$completeText."%");
        $qb->setMaxResults($limit);
        $result = $qb->getQuery()->getResult();


        $qb = $this->createQueryBuilder("t");
        $qb->andWhere("t.description like :text")->setParameter("text", "%".$completeText."%");
        $qb->setMaxResults($limit);
        $result = array_merge($result,$qb->getQuery()->getResult());
        
        $qb = $this->createQueryBuilder("t");
        $count = 0;
        foreach ($texts as $text) {
            $qb->orWhere("t.name like :text")->setParameter("text", "%".$text."%");
            $qb->orWhere("t.description like :text")->setParameter("text", "%".$text."%");
            $qb->orWhere("t.id like :text")->setParameter("text", "%".$text."%");
            $qb->setMaxResults($limit);
            $count ++;
        }
        $result = array_merge($result,$qb->getQuery()->getResult());

        return array_unique($result, SORT_REGULAR);
    }


}
